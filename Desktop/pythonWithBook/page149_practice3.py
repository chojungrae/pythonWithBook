n, m = map(int, input().split())

graph = []

for i in range(n):
    graph.append(list(map(int, input())))

# ls = [
#     ['0','0','0','0','0','1','1','1','1','0','0','0','0','0'],
#     ['1','1','1','1','1','1','0','1','1','1','1','1','1','0'],
#     ['1','1','0','1','1','1','0','1','1','0','1','1','1','0'],
#     ['1','1','0','1','1','1','0','1','1','0','0','0','0','0'],
#     ['1','1','0','1','1','1','1','1','1','1','1','1','1','1'],
#     ['1','1','0','1','1','1','1','1','1','1','1','1','0','0'],
#     ['1','1','0','0','0','0','0','0','0','1','1','1','1','1'],
#     ['0','1','1','1','1','1','1','1','1','1','1','1','1','1'],
#     ['0','0','0','0','0','0','0','0','0','1','1','1','1','1'],
#     ['0','1','1','1','1','1','1','1','1','1','1','0','0','0'],
#     ['0','0','0','1','1','1','1','1','1','1','1','0','0','0'],
#     ['0','0','0','0','0','0','0','1','1','1','1','0','0','0'],
#     ['1','1','1','1','1','1','1','1','1','1','0','0','1','1'],
#     ['1','1','1','1','1','1','1','1','1','1','0','0','1','1'],
#     ['1','1','1','0','0','0','1','1','1','1','1','1','1','1'],
#     ['1','1','1','0','0','0','1','1','1','1','1','1','1','1'],
# ]

def dfs(x, y):
    if x <= -1 or x >= n or y <= -1 or y >= m: # 범위를 벗어난 경우 return False
        return False
    
    if graph[x][y] == 0:
        graph[x][y] = 1
        dfs(x - 1, y)
        dfs(x + 1, y)
        dfs(x, y - 1)
        dfs(x, y + 1)
        return True

    return False

resultCount = 0

for i in range(n):
    for j in range(m):
        if dfs(i, j) == True:
            resultCount += 1

print(resultCount)